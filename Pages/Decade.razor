@page "/decade"
@using static Compounding;

<h3>Decade</h3>

<div class="row">
    <div class="col-12 col-md-3">
        <div class="form-floating mb-3">
            <input type="number" class="form-control" id="initialEarnings" value="@initialEarnings"
                   @oninput="ChangeInitialEarnings">
            <label for="initialEarnings">First Year Earnings</label>
        </div>
    </div>
    <div class="col-12 col-md-3">
        <PercentRangeSlider Label="Growth Rate" @bind-Value="@growthRate" />
    </div>
    <div class="col-12 col-md-3">
        <PercentRangeSlider Label="Discount Rate" @bind-Value="@discountRate" />
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th></th>
            @for (int i = 0; i < years; i++)
            {
                <th>
                    Year @(i + 1)
                </th>
            }
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>
                Earnings
            </th>
            @for (int i = 0; i < years; i++)
            {
                <td>
                    @Currency(EarningsForYear(i))
                </td>
            }
        </tr>
        <tr>
            <th>
                Present Value of Earnings
            </th>
            @for (int i = 0; i < years; i++)
            {
                <td>
                    @Currency(EarningsPresentValue(i))
                </td>
            }
        </tr>
        <tr>
            <th>PV as Percent of Future Value</th>
            @for (int i = 0; i < years; i++)
            {
                <td>
                    @Percent(EarningsPresentValue(i) / EarningsForYear(i))
                </td>
            }
        </tr>
    </tbody>
</table>

@*
Output:
- sum total of all present values
- earnings multiple
*@

@code {
    const int years = 10;
    private double initialEarnings = 1_000;
    private double growthRate = 0.20;
    private double discountRate = 0.10;

    private void ChangeInitialEarnings(ChangeEventArgs e)
    {
        initialEarnings = Parsing.ToDouble(e.Value);
    }

    private double EarningsForYear(int yearIndex) => Compound(initialEarnings, periods: yearIndex, growthRate);

    private double EarningsPresentValue(int yearIndex)
    {
        var earnings = EarningsForYear(yearIndex);
        var presentValue = Discount(earnings, periods: yearIndex + 1, discountRate);
        return presentValue;
    }

    private static string Currency(double value) => value.ToString("C0");

    private static string Percent(double value) => value.ToString("P0");
}
